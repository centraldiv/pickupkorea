generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id String @id @default(uuid())

  fullName String @db.Char(100)

  email    String  @unique
  username String  @unique
  password String  @db.Text
  country  String  @db.Char(100)
  isAdmin  Boolean @default(false)
  pfCode   String? @unique
  kakaoId  String? @unique

  items           item[]
  buyOrders       buyOrder[]
  address         address[]
  productInvoices productInvoice[]
  pfOrder         pfOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model country {
  id        String   @id @default(uuid())
  name      String   @unique @db.Char(100)
  code      String   @unique @db.Char(3)
  createdAt DateTime @default(now())
}

model address {
  id     String @id @default(uuid())
  userId String
  user   user   @relation(fields: [userId], references: [id])

  receiverName String @db.Char(100)
  phone        String @db.Char(50)
  email        String @db.Char(100)
  street       String @db.Char(100)
  city         String @db.Char(100)
  state        String @db.Char(100)
  zipcode      String @db.Char(20)
  country      String @db.Char(100)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyOrder buyOrder[]
  pfOrder  pfOrder[]
}

model buyOrder {
  id     String @id @default(uuid())
  userId String
  user   user   @relation(fields: [userId], references: [id])

  locked Boolean @default(false)

  shipRightAway Boolean @default(false)

  addressId String?
  address   address? @relation(fields: [addressId], references: [id])

  userMemo  String? @db.Text
  staffMemo String? @db.Text

  orderStatus String @default("Pending Review")

  purchaseDate DateTime?

  items item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model pfOrder {
  id     String @id @default(uuid())
  userId String
  user   user   @relation(fields: [userId], references: [id])

  locked Boolean @default(false)

  shipRightAway Boolean @default(false)

  userMemo  String? @db.Text
  staffMemo String? @db.Text

  orderStatus String @default("Pending Review")

  items item[]

  addressId String?
  address   address? @relation(fields: [addressId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model item {
  id String @id @default(uuid())

  productName String?

  href             String @db.Text
  quantity         Int
  receivedQuantity Int    @default(0)
  shippedQuantity  Int    @default(0)
  creditedQuantity Int    @default(0)

  price         Int @default(0)
  creditedPrice Int @default(0)

  option    String? @db.Text
  memo      String? @db.Text
  staffMemo String? @db.Text

  productStatus String @default("Pending Review")

  unboxingVideoRequested Boolean @default(false)
  unboxingPhotoRequested Boolean @default(false)
  unboxingVideoUrl       String? @db.Text
  unboxingPhotoUrl       String? @db.Text
  isInclusion            Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   user?   @relation(fields: [userId], references: [id])
  userId String?

  buyOrder   buyOrder? @relation(fields: [buyOrderId], references: [id])
  buyOrderId String?

  productInvoice   productInvoice? @relation(fields: [productInvoiceId], references: [id])
  productInvoiceId String?

  pfOrder   pfOrder? @relation(fields: [pfOrderId], references: [id])
  pfOrderId String?
}

model productInvoice {
  id String @id @default(uuid())

  invoiceNumber String @db.Char(10)
  items         item[]
  invoiceList   Json
  totalPrice    Int

  userId String
  user   user   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
