generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model pfCodeCount {
  id          String @id @default(uuid())
  countryCode String @unique
  count       Int    @default(0)
}

model user {
  id String @id @default(uuid())

  fullName String @db.Text

  email     String   @unique
  username  String   @unique
  password  String   @db.Text
  country   country? @relation(fields: [countryId], references: [id], onDelete: SetNull)
  countryId String?
  isAdmin   Boolean  @default(false)
  pfCode    String?  @unique
  kakaoId   String?

  items     item[]
  buyOrders buyOrder[]
  address   address[]

  productInvoices productInvoice[]
  pfOrder         pfOrder[]

  creditAmount Int @default(0)

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  shippingInvoice shippingInvoice[]
  shippingRequest shippingRequest[]
  toShipItem      toShipItem[]

  defaultAddress defaultAddress?
  creditHistory  creditHistory[]
}

model creditHistory {
  id     String @id @default(uuid())
  userId String

  user user @relation(fields: [userId], references: [id])

  creditAmount Int

  content   String   @db.Text
  createdAt DateTime @default(now())
}

model availableShippingMethods {
  id        String   @id @default(uuid())
  name      String   @unique @db.Text
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyOrder        buyOrder[]
  pfOrder         pfOrder[]
  shippingRequest shippingRequest[]
  defaultAddress  defaultAddress[]
}

model country {
  id        String   @id @default(uuid())
  name      String   @unique @db.Text
  code      String   @unique @db.Text
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)

  address        address[]
  user           user[]
  defaultAddress defaultAddress[]
}

model address {
  id     String @id @default(uuid())
  userId String
  user   user   @relation(fields: [userId], references: [id])

  receiverName String   @db.Text
  phone        String   @db.Text
  email        String   @db.Text
  street       String   @db.Text
  city         String   @db.Text
  state        String   @db.Text
  zipcode      String   @db.Text
  country      country? @relation(fields: [countryId], references: [id], onDelete: SetNull)
  countryId    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyOrder        buyOrder[]
  pfOrder         pfOrder[]
  shippingRequest shippingRequest[]
}

model defaultAddress {
  id String @id @default(uuid())

  receiverName String @db.Text
  phone        String @db.Text
  email        String @db.Text
  street       String @db.Text
  city         String @db.Text
  state        String @db.Text
  zipcode      String @db.Text

  country   country? @relation(fields: [countryId], references: [id], onDelete: SetNull)
  countryId String?

  shippingMethod   availableShippingMethods? @relation(fields: [shippingMethodId], references: [id])
  shippingMethodId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   user   @relation(fields: [userId], references: [id])
  userId String @unique
}

model buyOrder {
  id     String @id @default(uuid())
  userId String
  user   user   @relation(fields: [userId], references: [id])

  locked           Boolean                   @default(false)
  shippingMethod   availableShippingMethods? @relation(fields: [shippingMethodId], references: [id])
  shippingMethodId String?

  shipRightAway Boolean @default(false)

  addressId String?
  address   address? @relation(fields: [addressId], references: [id])

  userMemo  String? @db.Text
  staffMemo String? @db.Text

  orderStatus String @default("Pending Review")

  purchaseDate DateTime?
  arrivalDate  DateTime?

  items item[]

  productInvoice   productInvoice? @relation(fields: [productInvoiceId], references: [id])
  productInvoiceId String?         @unique

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  shippingInvoice shippingInvoice[]
  shippingRequest shippingRequest[]
}

model pfOrder {
  id     String @id @default(uuid())
  userId String
  user   user   @relation(fields: [userId], references: [id])

  locked Boolean @default(false)

  shippingMethod   availableShippingMethods? @relation(fields: [shippingMethodId], references: [id])
  shippingMethodId String?

  shipRightAway Boolean @default(false)

  userMemo  String? @db.Text
  staffMemo String? @db.Text

  orderStatus String @default("Pending Review")

  arrivalDate DateTime?

  items item[]

  addressId String?
  address   address? @relation(fields: [addressId], references: [id])

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  shippingInvoice shippingInvoice[]
  shippingRequest shippingRequest[]
}

model item {
  id String @id @default(uuid())

  productName String?

  href             String @db.Text
  quantity         Int
  receivedQuantity Int    @default(0)
  shippedQuantity  Int    @default(0)
  creditedQuantity Int    @default(0)

  price         Int @default(0)
  creditedPrice Int @default(0)

  option    String? @db.Text
  memo      String? @db.Text
  staffMemo String? @db.Text

  productStatus String @default("Pending Review")

  unboxingVideoRequested Boolean @default(false)
  unboxingPhotoRequested Boolean @default(false)
  unboxingVideoUrl       String? @db.Text
  unboxingPhotoUrl       String? @db.Text
  isInclusion            Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   user?   @relation(fields: [userId], references: [id])
  userId String?

  buyOrder   buyOrder? @relation(fields: [buyOrderId], references: [id])
  buyOrderId String?

  pfOrder   pfOrder? @relation(fields: [pfOrderId], references: [id])
  pfOrderId String?

  shippingRequest shippingRequest[]
  toShipItem      toShipItem[]
}

model toShipItem {
  id String @id @default(uuid())

  availableQuantity Int
  toShipQuantity    Int

  shippingRequest   shippingRequest @relation(fields: [shippingRequestId], references: [id])
  shippingRequestId String

  item   item   @relation(fields: [itemId], references: [id])
  itemId String

  userId String
  user   user   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model productInvoice {
  id String @id @default(uuid())

  invoiceNumber String @db.Text
  invoiceList   Json
  totalPrice    Int

  paid Boolean @default(false)

  userId String
  user   user   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyOrder buyOrder?
}

model productInvoiceCount {
  id    String @id @default(uuid())
  count Int    @default(0)
}

model shippingInvoice {
  id String @id @default(uuid())

  invoiceNumber String @db.Text
  invoiceList   Json
  totalPrice    Int

  paid Boolean @default(false)

  userId String
  user   user   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  buyOrder buyOrder? @relation(fields: [buyOrderId], references: [id])
  pfOrder  pfOrder?  @relation(fields: [pfOrderId], references: [id])

  buyOrderId String?
  pfOrderId  String?

  shippingRequest shippingRequest?
}

model shippingInvoiceCount {
  id    String @id @default(uuid())
  count Int    @default(0)
}

model shippingRequestCount {
  id    String @id @default(uuid())
  count Int    @default(0)
}

model shippingRequest {
  id String @id @default(uuid())

  userId String
  user   user   @relation(fields: [userId], references: [id])

  requestNumber String @unique @db.Text

  requestStatus String @default("Requested")

  userMemo  String? @db.Text
  staffMemo String? @db.Text

  addressId String
  address   address @relation(fields: [addressId], references: [id])

  shippingMethod   availableShippingMethods? @relation(fields: [shippingMethodId], references: [id])
  shippingMethodId String?

  items       item[]
  toShipItems toShipItem[]

  buyOrders buyOrder[]
  pfOrders  pfOrder[]

  shippingInvoice   shippingInvoice? @relation(fields: [shippingInvoiceId], references: [id], onDelete: SetNull)
  shippingInvoiceId String?          @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
