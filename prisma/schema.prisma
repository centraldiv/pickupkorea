generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id String @id @default(uuid())

  fullName String

  email    String  @unique
  username String  @unique
  password String
  country  String
  isAdmin  Boolean @default(false)
  pfCode   String? @unique
  kakaoId  String? @unique

  items           item[]
  buyOrders       buyOrder[]
  address         address[]
  productInvoices productInvoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model country {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
}

model address {
  id     String @id @default(uuid())
  userId String
  user   user   @relation(fields: [userId], references: [id])

  receiverName String
  phone        String
  email        String
  street       String
  city         String
  state        String
  zipcode      String
  country      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model buyOrder {
  id     String @id @default(uuid())
  userId String
  user   user   @relation(fields: [userId], references: [id])

  locked Boolean @default(false)

  shipRightAway Boolean @default(false)

  userMemo  String?
  staffMemo String?

  orderStatus String @default("Pending Review")

  purchaseDate DateTime?

  items item[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model item {
  id String @id @default(uuid())

  productName String?

  href             String
  quantity         Int
  receivedQuantity Int    @default(0)

  option    String
  memo      String
  staffMemo String?

  productStatus String @default("Pending Review")

  unboxingVideoRequested Boolean @default(false)
  unboxingPhotoRequested Boolean @default(false)
  unboxingVideoUrl       String?
  unboxingPhotoUrl       String?
  isInclusion            Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user             user?           @relation(fields: [userId], references: [id])
  userId           String?
  buyOrder         buyOrder?       @relation(fields: [buyOrderId], references: [id])
  buyOrderId       String?
  productInvoice   productInvoice? @relation(fields: [productInvoiceId], references: [id])
  productInvoiceId String?
}

model productInvoice {
  id String @id @default(uuid())

  invoiceNumber String
  items         item[]
  invoiceList   Json
  totalPrice    Int

  userId String
  user   user   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
